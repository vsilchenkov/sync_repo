#Использовать configor
#Использовать cmdline
#Использовать "../srс/Модули"

&Пластилин
Перем Настройки;

&Пластилин
Перем Логирователь; // BSLLS:Typo-off

&Пластилин
Перем Телеграм;

&Пластилин
Перем Завершатель; // BSLLS:Typo-off

// BSLLS:CyclomaticComplexity-off
Процедура ЗаполнитьНачальныеНастройки() Экспорт  // BSLLS:CognitiveComplexity-off 

	Парсер = Новый ПарсерАргументовКоманднойСтроки();
		
	// Обязательный параметр (QA,PP...)
	Парсер.ДобавитьИменованныйПараметр("--ИдентификаторБазы"); 

	// Список команд которые следует запускать
	// По умолчанию - КомандыОбновления
	Парсер.ДобавитьИменованныйПараметр("--ИдентификаторКоманд"); 

	// Список команд в групповом файле комманд
	Парсер.ДобавитьИменованныйПараметр("--ИдентификаторГрупповыхКоманд"); 

	// config.yaml - по умолчанию
	// Имя файла с настройками (тогда он должен распологаться вместе со скриптом или полный путь к файлу)
	ПутьКФайлуConfig = Парсер.ДобавитьИменованныйПараметр("--Config"); 

	// Имя файла с командами, если файл не передан, то команды будут искаться в файле config
	ПутьКФайлуCommands = Парсер.ДобавитьИменованныйПараметр("--Commands"); 
		
	// Имя файла с групповыми командами, если файл передан, то будут запускаться групповые команды
	ПутьКФайлуGroupCommands = Парсер.ДобавитьИменованныйПараметр("--GroupCommands"); 	
	ПозицияВГрупповой = Парсер.ДобавитьИменованныйПараметр("--GroupPosition");

	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

	ПутьКФайлуConfig = Параметры["--Config"];
	Если Не ЗначениеЗаполнено(ПутьКФайлуConfig) Тогда
		ПутьКФайлуConfig = "config.yaml";				
	КонецЕсли;

	Настройки.ИдентификаторБазы = Параметры["--ИдентификаторБазы"];
	
	ПутьКФайлуCommands = Параметры["--Commands"];
	ПутьКФайлуGroupCommands = Параметры["--GroupCommands"];
	ПозицияВГрупповой = Параметры["--GroupPosition"];
	Если НЕ ЗначениеЗаполнено(ПозицияВГрупповой) Тогда
		ПозицияВГрупповой = 0;		
	КонецЕсли;

	ИдентификаторКоманд = Параметры["--ИдентификаторКоманд"];
	ИдентификаторГрупповыхКоманд = Параметры["--ИдентификаторГрупповыхКоманд"];

	Если Не ЗначениеЗаполнено(Настройки.ИдентификаторБазы) 
			И Не ЗначениеЗаполнено(ПутьКФайлуCommands) 
			И Не ЗначениеЗаполнено(ПутьКФайлуGroupCommands) Тогда
		// ***************************Debug***************************
		Настройки.РежимDebug = Истина;
		ПутьКФайлуConfig = "\config\config_debug.yaml";
		// ***************************Debug***************************
	Иначе
		Настройки.РежимDebug = Ложь;		
	КонецЕсли;

	Настройки.ПараметрыDebug    = Новый Структура("КаталогСкрипта", "");
	Настройки.ПозицияВГрупповой = ПозицияВГрупповой;
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуGroupCommands) Тогда
	
		МенеджерПараметров = РаботаСФайлами.ПрочитатьYAMLФайл(ПутьКФайлуConfig);
		Настройки.ПараметрыОбщие = МенеджерПараметров.Параметр("Общие");

		Если Настройки.РежимDebug Тогда
			ПереопределитьПараметрыDebug(ИдентификаторКоманд, ПутьКФайлуCommands, 
											ПутьКФайлуGroupCommands, ИдентификаторГрупповыхКоманд);
		КонецЕсли;

		Настройки.ПараметрыПлатформы = МенеджерПараметров.Параметр("Платформа");	
		Настройки.ПараметрыБазы = МенеджерПараметров.Параметр(Настройки.ИдентификаторБазы);
		Если ТипЗнч(Настройки.ПараметрыБазы) <> Тип("Соответствие") Тогда
			Логирователь.ВЛог("Нет настроек для базы - " + Настройки.ИдентификаторБазы, Истина);
			Завершатель.ЗавершитьПоОшибке();
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ИдентификаторКоманд) Тогда
			Если Не ЗначениеЗаполнено(ПутьКФайлуCommands) Тогда
				Логирователь.ВЛог("Не передан параметр ""ИдентификаторКоманд"" - для базы " + Настройки.ИдентификаторБазы, Истина);
				Завершатель.ЗавершитьПоОшибке();	
			Иначе
				// по умолчанию
				ИдентификаторКоманд = "Команды";
			КонецЕсли;		
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ПутьКФайлуCommands) Тогда
			КорневыеПараметрыКоманд = Настройки.ПараметрыБазы;
		Иначе			
			МенеджерПараметров = РаботаСФайлами.ПрочитатьYAMLФайл(ПутьКФайлуCommands);
			КорневыеПараметрыКоманд = МенеджерПараметров.Параметр(Настройки.ИдентификаторБазы);
		КонецЕсли;
		
	Иначе
		Настройки.ПараметрыОбщие = Новый Соответствие();
		Настройки.ПараметрыПлатформы = Новый Соответствие();
		Настройки.ПараметрыБазы = Новый Соответствие();
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьКФайлуGroupCommands) Тогда
		Если НЕ ЗначениеЗаполнено(ИдентификаторГрупповыхКоманд) Тогда
			ИдентификаторГрупповыхКоманд = "Запуск"; // по умолчанию	
		КонецЕсли;
		Настройки.ИдентификаторГрупповыхКоманд = ИдентификаторГрупповыхКоманд;
	КонецЕсли;

	ТекстОписанияНастроек = Символы.ПС;
	ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "-----------------------------");	
	ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "Текущий каталог: " + ТекущийКаталог());
	Если ЗначениеЗаполнено(ПутьКФайлуGroupCommands) Тогда	
		ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "Идентификатор групповых команд: " + ИдентификаторГрупповыхКоманд);
		ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "Файл групповых команд: " + ПутьКФайлуGroupCommands);		
	Иначе
		ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "Файл настроек: " + ПутьКФайлуConfig);
		Если ЗначениеЗаполнено(ПутьКФайлуCommands) Тогда
			ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "Файл команд: " + ПутьКФайлуCommands);		
		КонецЕсли;
		ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "ИдентификаторБазы: " + Настройки.ИдентификаторБазы);
		ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "ИдентификаторКоманд: " + ИдентификаторКоманд);	
	КонецЕсли;
	Если Настройки.РежимDebug Тогда
		ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "Режим Debug");		
	КонецЕсли;
	ДобавитьСтрокуЧерезПС(ТекстОписанияНастроек, "-----------------------------");
	Логирователь.ВЛог(ТекстОписанияНастроек);

	Настройки.ГрупповыеКоманды = Новый Массив;
	Если ЗначениеЗаполнено(ПутьКФайлуGroupCommands) Тогда
		ЗаполнитьГрупповыеКоманды(ИдентификаторГрупповыхКоманд, ПутьКФайлуGroupCommands);
	Иначе
		ЗаполнитьКоманды(ИдентификаторКоманд, КорневыеПараметрыКоманд);
		ЗаполнитьОбщиеПараметры();
		ЗаполнитьПараметрыПодключения();
		ЗаполнитьДанныеФайловНастроек();
	КонецЕсли;
	
	Настройки.ПараметрыОбщие.Вставить("ПутьКФайлуConfig", ПутьКФайлуConfig); 
	Настройки.ПараметрыОбщие.Вставить("ПутьКФайлуCommands", ПутьКФайлуCommands); 
	Настройки.ПараметрыОбщие.Вставить("ПутьКФайлуGroupCommands", ПутьКФайлуGroupCommands); 
	Настройки.ПараметрыОбщие.Вставить("ИдентификаторКоманд", ИдентификаторКоманд);

КонецПроцедуры

Процедура ЗаполнитьКоманды(ИдентификаторКоманд, КорневыеПараметры)
	
	ТипСоответствие = Тип("Соответствие");
	Если Не ТипЗнч(КорневыеПараметры) = ТипСоответствие Тогда
		Завершатель.ЗавершитьПоОшибке("Не найдены команды в файле команд");
		Возврат;
	КонецЕсли;

	ДанныеКоманд = КорневыеПараметры.Получить(ИдентификаторКоманд);
	Если ТипЗнч(ДанныеКоманд) <> ТипСоответствие Тогда

		// Проверим якорь
		Якорь = КорневыеПараметры.Получить("<<");
		Если Якорь <> Неопределено Тогда
			ДанныеКоманд = Якорь.Получить(ИдентификаторКоманд);		
		КонецЕсли;

		Если ТипЗнч(ДанныеКоманд) <> ТипСоответствие Тогда
			Логирователь.ВЛог("Не найдены команды - " + ИдентификаторКоманд, Истина);
			Завершатель.ЗавершитьПоОшибке();
		КонецЕсли;

	КонецЕсли;

	Настройки.КомандыВыполнения = ДанныеКоманд.Получить("Команды");
	Если ТипЗнч(Настройки.КомандыВыполнения) <> Тип("Массив") Тогда
		Логирователь.ВЛог("Нет списка команд - " + ИдентификаторКоманд, Истина);
		Завершатель.ЗавершитьПоОшибке();
	КонецЕсли;

	// Параметры команд
	Настройки.ПараметрыКоманд = Новый Структура();	

	ДанныеПараметров = ДанныеКоманд.Получить("Параметры");
	Если ДанныеПараметров <> Неопределено Тогда
		
		Приветствие = ДанныеПараметров.Получить("Приветствие");
		Начало      =  ДанныеПараметров.Получить("Начало");
		Окончание   = ДанныеПараметров.Получить("Окончание");
		
		Пауза                   = ДанныеПараметров.Получить("Пауза");
		КлючиЗапускаПредприятия = ДанныеПараметров.Получить("КлючиЗапускаПредприятия");
		КомментарийПриПомещенииВХранилище = ДанныеПараметров.Получить("КомментарийПриПомещенииВХранилище");
		СниматьБлокировкуРегламентныхЗаданий = ДанныеПараметров.Получить("СниматьБлокировкуРегламентныхЗаданий");
		ОтправлятьСообщенияВТелеграм = ДанныеПараметров.Получить("ОтправлятьСообщенияВТелеграм");
		ТекстВопроса = ДанныеПараметров.Получить("ТекстВопроса");
	Иначе
		Приветствие             = "";	
		Начало                  = "";
		Окончание               = "";
		Пауза                   = "0";
		КлючиЗапускаПредприятия = "";
		КомментарийПриПомещенииВХранилище = "";
		СниматьБлокировкуРегламентныхЗаданий = Ложь;
		ОтправлятьСообщенияВТелеграм = Ложь;
		ТекстВопроса = "";
	КонецЕсли;

	Настройки.ПараметрыКоманд.Вставить("Приветствие",             Приветствие);
	Настройки.ПараметрыКоманд.Вставить("Начало",                  Начало);
	Настройки.ПараметрыКоманд.Вставить("Окончание",               Окончание);
	Настройки.ПараметрыКоманд.Вставить("Пауза",                   Пауза);	
	Настройки.ПараметрыКоманд.Вставить("КлючиЗапускаПредприятия", КлючиЗапускаПредприятия);
	Настройки.ПараметрыКоманд.Вставить("КомментарийПриПомещенииВХранилище", КомментарийПриПомещенииВХранилище);	
	Настройки.ПараметрыКоманд.Вставить("СниматьБлокировкуРегламентныхЗаданий", СниматьБлокировкуРегламентныхЗаданий);	
	Настройки.ПараметрыКоманд.Вставить("ОтправлятьСообщенияВТелеграм", ОтправлятьСообщенияВТелеграм);
	Настройки.ПараметрыКоманд.Вставить("ТекстВопроса",            ТекстВопроса);

КонецПроцедуры

Процедура ЗаполнитьГрупповыеКоманды(ИдентификаторГрупповыхКоманд, ПутьКФайлу)
	
	МенеджерПараметров = РаботаСФайлами.ПрочитатьYAMLФайл(ПутьКФайлу);

	КорневыеПараметрыКоманд = МенеджерПараметров.Параметр(ИдентификаторГрупповыхКоманд);
	Если НЕ ТипЗнч(КорневыеПараметрыКоманд) = Тип("Соответствие") Тогда
		ВызватьИсключение "Не найдены групповые команды - " + ИдентификаторГрупповыхКоманд;
	КонецЕсли;

	ДанныеПараметров = КорневыеПараметрыКоманд.Получить("Параметры");
	ДанныеКоманд = КорневыеПараметрыКоманд.Получить("Команды");

	Если Не ТипЗнч(ДанныеКоманд) = Тип("Массив") Тогда
		ВызватьИсключение "Не найден список команд для - " + ИдентификаторГрупповыхКоманд;
	КонецЕсли;

	Если НЕ ТипЗнч(ДанныеПараметров) = Тип("Соответствие") Тогда
		ДанныеПараметров = Новый Соответствие;
	КонецЕсли;

	Разделитель = "%";
	Для каждого СтрокаКоманды Из ДанныеКоманд Цикл
	
		Для каждого КлючЗначение Из ДанныеПараметров Цикл
			ИмяПараметра = КлючЗначение.Ключ;
			ЗначениеПараметра = КлючЗначение.Значение;
			СтрокаКоманды = Логирователь.ЗаменитьПараметрВТексте(СтрокаКоманды, ИмяПараметра, ЗначениеПараметра, Разделитель);
		КонецЦикла;

		СтрокаКоманды = Логирователь.ЗаменитьПараметрВТексте(СтрокаКоманды, "ПС", Символы.ПС, Разделитель);
		Настройки.ГрупповыеКоманды.Добавить(СтрокаКоманды);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОбщиеПараметры()

	Настройки.ПараметрыТелеграм = Новый Структура();

	ЗаполнитьПараметрыТелеграм();
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыТелеграм()
	
	// Телеграм
	ДанныеПараметров = Настройки.ПараметрыОбщие.Получить("Телеграм");
	ОтправлятьСообщения = Общий.ПризнакВключенияПараметра("ОтправлятьСообщенияВТелеграм", Настройки.ПараметрыКоманд);
	Настройки.ПараметрыТелеграм.Вставить("ОтправлятьСообщения", ОтправлятьСообщения);	
	Настройки.ПараметрыТелеграм.Вставить("BotID", ДанныеПараметров.Получить("BotID"));
	Настройки.ПараметрыТелеграм.Вставить("Токен", ДанныеПараметров.Получить("Токен"));

	Если Настройки.РежимDebug = Истина Тогда
		
		Настройки.ПараметрыТелеграм.ОтправлятьСообщения = Ложь;		
	
	Иначе

		Телеграм.УстановитьТокен(Настройки.ПараметрыТелеграм.Токен);

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПодключения()

	Настройки.ПараметрыПодключения = Новый Структура();

	// Общие
	Настройки.ПараметрыПодключения.Вставить("Идентификатор", Строка(Настройки.ПараметрыОбщие.Получить("Идентификатор")));
	
	Ответственный = Настройки.ПараметрыОбщие.Получить("Ответственный");
	Если Ответственный = "Фамилия Имя" Тогда
		Завершатель.ЗавершитьПоОшибке("Заполни ответственного в файле настроек!");
		Возврат;		
	КонецЕсли;

	Настройки.ПараметрыПодключения.Вставить("Ответственный", Ответственный);	
	
	// Платформа
	Настройки.ПараметрыПодключения.Вставить("ПутьКПлатформе", Настройки.ПараметрыПлатформы.Получить("1cv8"));
	Настройки.ПараметрыПодключения.Вставить("ВерсияПлатформы", Настройки.ПараметрыПлатформы.Получить("Версия"));

	// RAS
	ПараметрыRAS = Настройки.ПараметрыПлатформы.Получить("RAS");
	Настройки.ПараметрыПодключения.Вставить("СерверRAS", ПараметрыRAS.Получить("Сервер"));
	Настройки.ПараметрыПодключения.Вставить("ПортRAS", ПараметрыRAS.Получить("Порт"));

	// Обновление
	ПараметрыОбновления = Настройки.ПараметрыПлатформы.Получить("Обновление");
	Настройки.ПараметрыПодключения.Вставить("СообщениеПриБлокировкиИБ",  ПараметрыОбновления.Получить("Сообщение"));
	Настройки.ПараметрыПодключения.Вставить("КодДоступаПриБлокировкиИБ",  ПараметрыОбновления.Получить("КодДоступа"));
	
	// База
	Настройки.ПараметрыПодключения.Вставить("ИмяБазы", Настройки.ПараметрыБазы.Получить("ИмяБазы"));
	Настройки.ПараметрыПодключения.Вставить("СерверБазы", Настройки.ПараметрыБазы.Получить("Сервер"));
	Настройки.ПараметрыПодключения.Вставить("ПортБазы", Настройки.ПараметрыБазы.Получить("Порт"));

	// Конфигуратор
	ПараметрыКонфигуратора = Настройки.ПараметрыБазы.Получить("Конфигуратор");
	Настройки.ПараметрыПодключения.Вставить("ЛогинККонфигуратору", ПараметрыКонфигуратора.Получить("Логин"));
	Настройки.ПараметрыПодключения.Вставить("ПарольККонфигуратору", ПараметрыКонфигуратора.Получить("Пароль"));

	// Хранилище
	ПараметрыХранилища = Настройки.ПараметрыБазы.Получить("Хранилище");
	Настройки.ПараметрыПодключения.Вставить("ПутьКХранилищу", ПараметрыХранилища.Получить("Путь"));
	Настройки.ПараметрыПодключения.Вставить("ЛогинКХранилищу", ПараметрыХранилища.Получить("Логин"));
	Настройки.ПараметрыПодключения.Вставить("ПарольКХранилищу", ПараметрыХранилища.Получить("Пароль"));

КонецПроцедуры

Процедура ЗаполнитьДанныеФайловНастроек()
	
	Настройки.ФайлыНастроек = Новый Структура();
	Настройки.ФайлыНастроек.Вставить("Каталог", Настройки.ПараметрыОбщие.Получить("КаталогНастроек"));

	ИменаФайлов = Настройки.ПараметрыОбщие.Получить("Файлы");
	Если ТипЗнч(ИменаФайлов) <> Тип("Соответствие") Тогда
		ВызватьИсключение "Не найдена секция ""Файлы"" в группе ""Общие"" в файле настроек";
	КонецЕсли;
		
	Настройки.ФайлыНастроек.Вставить("repo_test", ИменаФайлов.Получить("repo_test"));
	Настройки.ФайлыНастроек.Вставить("merge", ИменаФайлов.Получить("merge"));

	metadata_name = ИменаФайлов.Получить("metadata");
	Если Не ЗначениеЗаполнено(metadata_name) Тогда
		metadata_name = "metadata.txt";	
	КонецЕсли;
	Настройки.ФайлыНастроек.Вставить("metadata", metadata_name);

	metadata_merge = ИменаФайлов.Получить("metadata_merge");
	Если Не ЗначениеЗаполнено(metadata_merge) Тогда
		metadata_merge = "metadata_merge.xml";	
	КонецЕсли;
	Настройки.ФайлыНастроек.Вставить("metadata_merge", metadata_merge);

	УстановитьКаталогCF();

КонецПроцедуры

Процедура ПереопределитьПараметрыDebug(ИдентификаторКоманд, ПутьКФайлуCommands, 
										ПутьКФайлуGroupCommands, ИдентификаторГрупповыхКоманд)

	ДанныеПараметров = Настройки.ПараметрыОбщие.Получить("Debug");
	Настройки.ИдентификаторБазы = ДанныеПараметров.Получить("ИдентификаторБазы");
	ИдентификаторКоманд = ДанныеПараметров.Получить("ИдентификаторКоманд");
	ПутьКФайлуCommands = ДанныеПараметров.Получить("ФайлКоманд");	
	ПутьКФайлуGroupCommands = ДанныеПараметров.Получить("ФайлГрупповыхКоманд");
	ИдентификаторГрупповыхКоманд = ДанныеПараметров.Получить("ИдентификаторГрупповыхКоманд");	
	Настройки.ПараметрыDebug.Вставить("КаталогСкрипта", ДанныеПараметров.Получить("КаталогСкрипта"));	

КонецПроцедуры

Процедура УстановитьКаталогCF(ПоУмолчанию = Ложь)
	
	Если ПоУмолчанию Тогда
		ПутьККаталогуCF = "\cf";
		Логирователь.ВЛог("Используем каталог по умолчанию для сохранения CF каталог - " + ПутьККаталогуCF);
	Иначе
		ПутьККаталогуCF = Настройки.ПараметрыОбщие.Получить("ПутьККаталогуCF");
	КонецЕсли;

	Если СтрНайти(ПутьККаталогуCF,":\") = 0 Тогда
		// Относительный путь
		ПутьККаталогуCF = ТекущийКаталог() + ПутьККаталогуCF; 					
	КонецЕсли;

	Если Не РаботаСФайлами.ФайлСуществует(ПутьККаталогуCF) Тогда
		
		Попытка
			СоздатьКаталог(ПутьККаталогуCF);	
		Исключение
			
			Логирователь.ВЛог("Не удаётся создать каталог CF по пути в настройках" + Символы.ПС + ОписаниеОшибки(), Истина);
			Если Не ПоУмолчанию Тогда
				УстановитьКаталогCF(Истина);
			Иначе
				ВызватьИсключение;	
			КонецЕсли;

		КонецПопытки;

	КонецЕсли;
	Настройки.ФайлыНастроек.Вставить("ПутьККаталогуCF", ПутьККаталогуCF);

КонецПроцедуры

Процедура ДобавитьСтрокуЧерезПС(СтрокаИсходная, Текст)
	
	Если Не ПустаяСтрока(СтрокаИсходная) Тогда
		СтрокаИсходная = СтрокаИсходная + Символы.ПС;
	КонецЕсли;

	СтрокаИсходная = СтрокаИсходная + Текст;

КонецПроцедуры

&Желудь
Процедура ПриСозданииОбъекта()
	
КонецПроцедуры