@Library("shared-libraries")

import io.libs.Utils
import io.libs.Telegram
import groovy.transform.Field

def utils = new Utils()

@Field
List<String> jenkinsAgent_values = ['DEV-1C-UPD', 'DEV-1C', 'v_silchenkov']

@Field
List<String> command_file_values = ['update_PP'
                                ]

pipeline {

    parameters {

       choice(name: 'command_file',
                choices: (params.command_file ? [params.command_file] : []) +
                             (command_file_values - 
                                 (params.command_file ? [params.command_file] : [])),
                description: '–°—Ü–µ–Ω–∞—Ä–∏–π')
      
       choice(name: 'jenkinsAgent',
                choices: (params.jenkinsAgent ? [params.jenkinsAgent] : []) +
                             (jenkinsAgent_values - 
                                 (params.jenkinsAgent ? [params.jenkinsAgent] : [])),
                description: '–ù–æ–¥–∞ –¥–∂–µ–Ω–∫–∏–Ω—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é master')

        text(defaultValue: "${env.listMetadataBuild}", description: '–°–ø–∏—Å–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º \"meta_\".' + '\n' +'–ù–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–≤–æ–ª *, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.', name: 'listMetadataBuild')
        booleanParam(defaultValue: "${env.includeChildObjects}", description: '–û–±–Ω–æ–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ', name: 'includeChildObjects')
        booleanParam(defaultValue: false, description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', name: 'dynamicUpdate')
        booleanParam(defaultValue: false, description: '–û—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ò–ë', name: 'keepLockIB')
        string(defaultValue: "${env.pausePredBuild}", description: '–ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö). –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—É–∑—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (5 –º–∏–Ω), –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏. (0 - –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)', name: 'pausePredBuild')        
        string(defaultValue: "1", description: '–ù–∞—á–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π', name: 'startFromPosition')        
        string(defaultValue: "${env.baseID}", description: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞–∑—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö —Å –ø–æ—Å—Ç—Ñ–∏–∫—Å–æ–º base_ID', name: 'baseID')
        string(defaultValue: "${env.platformID}", description: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –±–∞–∑—ã base_ID. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö —Å –ø–æ—Å—Ç—Ñ–∏–∫—Å–æ–º base_ID', name: 'platformID')
        booleanParam(defaultValue: "${env.sendMessageStatusJob}", description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–¥–∞–Ω–∏—è Jenkins', name: 'sendMessageStatusJob')
        booleanParam(defaultValue: "${env.debug}", description: '–û—Ç–ª–∞–¥–∫–∞', name: 'debug')   
    }
   
    agent {        
        label "${(env.jenkinsAgent == null || env.jenkinsAgent == 'null') ? "master" : env.jenkinsAgent}"
    }
    environment {
        LOGOS_LEVEL = logos_level()                
        SYNC_REPO_BUILD_USER = build_user()
        SYNC_REPO_UPDATE_DYNAMIC = dynamicUpdate()
        SYNC_REPO_KEEP_LOCK_IB = keepLockIB()
        SYNC_REPO_BACKGROUND = true
        SYNC_REPO_USEPOWERSHELL = true
        SYNC_REPO_PAUSE_PRED_BUILD = pausePredBuildToInt()
        SYNC_REPO_BUILD_STARTFROMPOSITION = startFromPositionToInt()
        SYNC_REPO_BUILD_LISTMETADATA = "${listMetadataBuild}"
        SYNC_REPO_BUILD_LISTMETADATA_INCLUDECHILDOBJECTS = includeChildObjects()
        BASE_ID = "${baseID}"
        PLATFORM_ID = "${platformID}"
                }                                
    options {
        timeout(time: 8, unit: 'HOURS') 
        buildDiscarder(logRotator(numToKeepStr:'10'))
    }
    stages {
        stage("Pre-Build") {
             steps {
                timestamps {
                    script {
                     returnCode = utils.cmd("oscript init.os")
                     if (returnCode != 0) {
                        utils.raiseError("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ init.os")
                        }                     
                    }
                }
            }
        }
        stage("–ó–∞–ø—É—Å–∫") {
             steps {
                timestamps {
                    script {
                 
                     sendTelegramMessage("‚ñ∂Ô∏è Jenkins is start ${JOB_NAME} - ${command_file}")

                     command_folder = command_file != "debug" ? "bat" : "tests"                     
                     
                     returnCode = utils.cmd("cd ${command_folder} \n ${command_file}.bat")
                     if (returnCode != 0) {
                       
                        def pathFileErrors = "${WORKSPACE}/var/errors/error_0.log"
                        def exists = fileExists pathFileErrors
                        if (exists) {
                           message = readFile pathFileErrors
                         } else {
                            message = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"
                        }
                        utils.raiseError(message)

                       }                     
                    }
                }
            }
        }
    }
    post {
        success{
            script {
                sendTelegramMessage("‚úÖ ${JOB_NAME} - ${command_file} is Success")              
                } 
        }
        unstable{
            script {
                sendTelegramMessage("‚ö†Ô∏è ${JOB_NAME} - ${command_file} is Alarm")                
                } 
        }
        failure{
            script {
                sendTelegramMessage("üÜò ${JOB_NAME} - ${command_file} is Failure")
                } 
        }       
    }  
    
}

def build_user() {
 
    wrap([$class: 'BuildUser']) {
        user = "${BUILD_USER}"
    }
    
    if (user == "") {
        user = "Jenkins"
    }

    return user
}

def logos_level() { 
 
    return params.debug ? "DEBUG" : ""

}

def dynamicUpdate() { 
 
    return params.dynamicUpdate

}

def includeChildObjects() { 
 
    return params.includeChildObjects

}

def keepLockIB() { 
 
    return params.keepLockIB

}

def pausePredBuildToInt() { 

    value = 0
    value = params.pausePredBuild
    return value   

}

def startFromPositionToInt() { 

    value = 1
    value = params.startFromPosition
    return value   

}

def sendTelegramMessage(message) { 

   if (params.sendMessageStatusJob) {
        def telegram = new Telegram()
        telegram.sendTelegramMessage(message)
    }

}
