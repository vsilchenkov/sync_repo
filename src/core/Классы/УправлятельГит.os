#Использовать "..//../../src/Модули"
#Использовать gitrunner

&Пластилин
Перем Логирователь; // BSLLS:Typo-off

Функция КлонироватьИлиПолучитьИзмененияРепозитория(РабочийКаталог, ИмяРепозитория, АдресУдаленногоРепозитория) Экспорт

	Результат = Ложь;

	ПолныйПуть = ОбъединитьПути(РабочийКаталог, ИмяРепозитория);

	Если Не РаботаСФайлами.ФайлСуществует(ПолныйПуть) Тогда
		СоздатьКаталог(ПолныйПуть);	
	КонецЕсли;

	ГитРепозиторий = Новый ГитРепозиторий();	
	ГитРепозиторий.УстановитьРабочийКаталог(ПолныйПуть);
	Если НайтиФайлы(ПолныйПуть, "*").Количество() > 0 Тогда
		Логирователь.ВЛог("Получаю изменения с удаленного репозитория " + ИмяРепозитория, , Ложь); 
		Попытка
			ГитРепозиторий.Получить();
		Исключение
			Логирователь.ВЛог(ОписаниеОшибки(), Истина);
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Логирователь.ВЛог("Клонирую удаленный репозиторий " + ИмяРепозитория, , Ложь); 
		Результат = КлонироватьРепозиторий(РабочийКаталог, ИмяРепозитория, АдресУдаленногоРепозитория);		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция КлонироватьРепозиторий(РабочийКаталог, ИмяРепозитория, АдресУдаленногоРепозитория) Экспорт
	
	ГитРепозиторий = Новый ГитРепозиторий();	
	ГитРепозиторий.УстановитьРабочийКаталог(РабочийКаталог);
	Попытка
		ГитРепозиторий.КлонироватьРепозиторий(АдресУдаленногоРепозитория, ИмяРепозитория);	
	Исключение
		Логирователь.ВЛог(ОписаниеОшибки(), Истина);
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

&Желудь
Процедура ПриСозданииОбъекта()
КонецПроцедуры