#Использовать "..//../../src/Модули"
#Использовать async

&Пластилин
Перем Настройки;

&Пластилин
Перем Выполнитель; // BSLLS:Typo-off

&Пластилин
Перем Логирователь;  // BSLLS:Typo-off

&Пластилин
Перем Завершатель; // BSLLS:Typo-off

&Пластилин
Перем Emoji; // BSLLS:Typo-off

&Пластилин
Перем КомандыПоКлючу;

&Пластилин("Команда")
Перем КомандаПоУмолчанию;

Перем Опции;
Перем ЗаполнительНастроек;
Перем КонтрольРасписания;

Процедура ВыполнитьКоманды(Позиция = 1) // BSLLS:CognitiveComplexity-off
	
	КомандыВыполнения = Настройки.КомандыВыполнения;
	КоличествоКоманд = КомандыВыполнения.Количество();

	Пока Позиция <= КоличествоКоманд Цикл
		
		ДанныеКоманды = КомандыВыполнения[Позиция - 1];

		Если ТипЗнч(ДанныеКоманды) = Тип("Соответствие") Тогда
			КлючКоманды = ДанныеКоманды.Получить("Команда");
			Если КлючКоманды = Неопределено Тогда
				Результат = ВыполнитьГруппуКоманд(ДанныеКоманды, Позиция);	// Асинх
			Иначе
				ПараметрыКоманды = ДанныеКоманды.Получить("Параметры");	
				Результат = ВыполнитьОдиночнуюКоманду(КлючКоманды, Позиция, ПараметрыКоманды);
			КонецЕсли;					
		Иначе
			КлючКоманды = ДанныеКоманды;
			ПараметрыКоманды = Неопределено;
			Результат = ВыполнитьОдиночнуюКоманду(КлючКоманды, Позиция );
		КонецЕсли;
		
		Если Результат = Ложь Тогда
			Возврат;			
		КонецЕсли;

		Позиция = Позиция + 1;

	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьОдиночнуюКоманду(КлючКоманды, Позиция, ПараметрыКоманды = Неопределено)
	Результат = ВыполнитьКоманду(КлючКоманды, Позиция, , , ПараметрыКоманды);
	ПроверитьРезультатВыполненияКоманды(КлючКоманды, Результат, Позиция);	
	Возврат Результат;
КонецФункции

Функция ВыполнитьГруппуКоманд(ГруппаКоманд, Позиция) // BSLLS:CognitiveComplexity-off
	
	Ждем = Новый Массив();
	
	ПозицияВГруппе = 1;
	
	Для каждого КлючЗначениеГруппы Из ГруппаКоманд Цикл
		
		КлючГруппы = КлючЗначениеГруппы.Ключ;

		КомандыГруппы = КлючЗначениеГруппы.Значение;
		Если ТипЗнч(КомандыГруппы) <> Тип("Массив") Тогда
			Продолжить;			
		КонецЕсли;

		Для каждого ДанныеКоманды Из КомандыГруппы Цикл
			
			Если ТипЗнч(ДанныеКоманды) = Тип("Соответствие") Тогда
				КлючКоманды = ДанныеКоманды.Получить("Команда");
				ПараметрыКоманды = ДанныеКоманды.Получить("Параметры");		
			Иначе
				КлючКоманды = ДанныеКоманды;
				ПараметрыКоманды = Неопределено;
			КонецЕсли;

			Если ПозицияВГруппе <> 1 Тогда
				Секунд = 1000; 
				Приостановить(Секунд);			
			КонецЕсли;

			Обещание = ВыполнитьКоманду(КлючКоманды, Позиция, ПозицияВГруппе, Истина, ПараметрыКоманды);
			Если ТипЗнч(Обещание) <> Тип("Обещание") Тогда	
				СтрокаСообщения = "Задание не отрабатывает асинхронно.
									|  Группа: " + Строка(КлючГруппы) + "
									|  Ключ команды: " + КлючКоманды;
				Логирователь.ВЛог(СтрокаСообщения, Истина);
				ПроверитьРезультатВыполненияКоманды(КлючКоманды, Ложь, Позиция);
				Возврат Ложь;
			КонецЕсли;		
		
			ПозицияВГруппе = ПозицияВГруппе + 1;

			Ждем.Добавить(Обещание);	
		
		КонецЦикла;

		Если Ждем.Количество() = 0 Тогда
			Возврат Истина; 
		КонецЕсли;
		
		Обещания.ОжидатьВсе(Ждем);

		ПозицияВГруппе = 0;
		Для каждого Обещание Из Ждем Цикл
			ПозицияВГруппе = ПозицияВГруппе + 1;
			Результат = ПроверитьРезультатОбещания(Обещание, КлючГруппы, ПозицияВГруппе);			
			ПроверитьРезультатВыполненияКоманды(КлючКоманды, Результат, Позиция);
			Если Результат = Ложь Тогда
				Возврат Результат;				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция ВыполнитьКоманду(КлючКоманды, Позиция, ПозицияВГруппе = 0, ВызовАсинх = Ложь, Знач Параметры = Неопределено)
	
	ПараметрыКоманды = Новый Структура("Ключ, Позиция, ПозицияВГруппе, Параметры", "", 0, 0);

	ПараметрыКоманды.Ключ    = КлючКоманды;
	ПараметрыКоманды.Позиция = Позиция;
	ПараметрыКоманды.ПозицияВГруппе = ПозицияВГруппе;

	ПараметрыКоманды.Параметры = ОбработатьВходящиеПараметрыКоманды(Параметры);

	Команда = КомандыПоКлючу[ВРег(КлючКоманды)];
	Если Команда = Неопределено Тогда
		Команда = КомандаПоУмолчанию;
	КонецЕсли;
		
	Попытка
		Если ВызовАсинх Тогда
			Обещание = Команда.ВыполнитьКомандуАсинх(ПараметрыКоманды); 	
			Возврат Обещание;
		Иначе
			Результат = Команда.ВыполнитьКоманду(ПараметрыКоманды); 	
		КонецЕсли;	
	Исключение
		Логирователь.ВЛог(ОписаниеОшибки(), Истина);
		Результат = Ложь;
	КонецПопытки;	

	Возврат Результат;

КонецФункции

Функция ОбработатьВходящиеПараметрыКоманды(Параметры)

	Полученные = Новый Соответствие;

	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		Для каждого ПараметрыВМассиве Из Параметры Цикл
			Входящие =  ОбработатьВходящиеПараметрыКоманды(ПараметрыВМассиве);	
			Общий.ОбъединитьСоответствия(Полученные, Входящие);
		КонецЦикла;		
		Возврат Полученные;		
	ИначеЕсли ТипЗнч(Параметры) <> Тип("Соответствие") Тогда
		Возврат Полученные;		
	Иначе
		Возврат Параметры;	
	КонецЕсли;

КонецФункции

Процедура ПроверитьРезультатВыполненияКоманды(КлючКоманды, Результат, Позиция)
	
	Если Результат = Истина Тогда
		Возврат;
	КонецЕсли;

	Если Настройки.РежимDebug = Истина 
			Или Настройки.Фоново =  Истина Тогда
		
		УведомитьИЗавершить = Истина;
		ТекстСообщения = "Прервано на команде: """ + Строка(КлючКоманды) + """"
											+ ", позиция: " + Позиция;
		Логирователь.ВЛог(ТекстСообщения, , Истина, , Emoji.Прервано(), Ложь);

	Иначе
		УведомитьИЗавершить = Ложь;
	КонецЕсли;

	Если УведомитьИЗавершить
			Или Настройки.ПозицияВГрупповой > 0 Тогда

		Завершатель.ЗавершитьПоОшибке();				

	КонецЕсли;

	СтрокаВвода = "";
	Подсказка = "Для продолжения набери команду"
					+ Символы.ПС
					+ "1 - запустить повторно этап: " + Строка(КлючКоманды)
					+ Символы.ПС
					+ "2 - запустить сначала сценарий: " + Настройки.ИдентификаторБазы
					+ Символы.ПС
					+ "0 - выйти"
					+ Символы.ПС;
					
	Пока ВвестиСтроку(СтрокаВвода, Подсказка, 1, Ложь) Цикл
		
		Если СтрокаВвода = "1" Тогда
			ВыполнитьКомандыПовторно(Позиция);
			Прервать;
		ИначеЕсли СтрокаВвода = "2" Тогда
			ВыполнитьКомандыПовторно(1);
			Прервать;
		ИначеЕсли СтрокаВвода = "0" Тогда
			Завершатель.ЗавершитьПоОшибке();
		Иначе
			Сообщить("Введено неизвестное значение");
			СтрокаВвода = "";
			Продолжить;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьРезультатОбещания(Обещание, КлючГруппы, ПозицияВГруппе)
	
	Состояние = Обещание.Состояние();
	
	Если Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
			Или Состояние = СостояниеФоновогоЗадания.НеВыполнялось Тогда

		ТекстСообщения = "Задание завершено аварийно.";
		ПоказатьСообщениеВыполненияЗадания(ТекстСообщения, КлючГруппы, , ПозицияВГруппе, , Истина);
		Возврат Ложь;

	Иначе

		ДанныеРезультата = Обещание.Получить();
		Если Не ТипЗнч(ДанныеРезультата) = Тип("Структура") Тогда
			
			ТекстСообщения = "Задание вернуло не структуру.";
			ПоказатьСообщениеВыполненияЗадания(ТекстСообщения, КлючГруппы, , ПозицияВГруппе, , Истина);
			Возврат Ложь;

		КонецЕсли;
		
		Результат = ДанныеРезультата.Результат;
		Если Результат = Ложь Тогда
			
			ТекстСообщения = "Задание не выполнено.";
			ПоказатьСообщениеВыполненияЗадания(ТекстСообщения, КлючГруппы, ДанныеРезультата.ПараметрыКоманды.Ключ, , 
													ДанныеРезультата.ОписаниеОшибки, Истина);
					
		КонецЕсли;
		
		Возврат Результат;

	КонецЕсли;

КонецФункции

Процедура ПоказатьСообщениеВыполненияЗадания(ТекстСообщения, КлючГруппы, КлючКоманды = "",
												ПозицияВГруппе = 0, ОписаниеОшибки = "", Ошибка = Ложь)

	СтрокаСообщения = ТекстСообщения + "
						|  Группа: " + Строка(КлючГруппы);
						
	Если ЗначениеЗаполнено(КлючКоманды) Тогда
		СтрокаСообщения = СтрокаСообщения + "
							|  Команда: " + Строка(КлючКоманды);
	Иначе
		СтрокаСообщения = СтрокаСообщения + "
							|  Позиция в группе: " + Строка(ПозицияВГруппе);
	КонецЕсли;															

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;

	Логирователь.ВЛог(СтрокаСообщения, Ошибка);

КонецПроцедуры

Процедура ВыполнитьКомандыПовторно(Позиция)
	ЗаполнительНастроек.ЗаполнитьНачальныеНастройки(Опции, Истина);
	ВыполнитьКоманды(Позиция);	
КонецПроцедуры

Процедура ВыполнитьГрупповыеКоманды()
	Выполнитель.ВыполнитьКомандыМногопоточно(Настройки.ГрупповыеКоманды);	
КонецПроцедуры

Процедура ЗаписатьФайлБлокировкиЗапуска()
	
	стрПозиция = Формат(Настройки.ПозицияВГрупповой, "ЧН=; ЧГ=");
	Инфо = "Выполнения команд №" + стрПозиция;
	ПутьКФайлу = Настройки.СформироватьПутьКФайлуБлокировкиЗапуска(Настройки.ПозицияВГрупповой);
	
	РаботаСФайлами.ЗаписатьТекстовыйФайл(Инфо, ПутьКФайлу);
	Настройки.ПутьКФайлуБлокировкиЗапуска = ПутьКФайлу;

КонецПроцедуры

Процедура БлокировкаОжиданияПредыдущегоЗадания(Опции)
	
	идБлокировки = Опции.Lock;
	Если Не ЗначениеЗаполнено(идБлокировки) Тогда
		Возврат;		
	КонецЕсли;

	ПутьКФайлуБлокировки = Настройки.СформироватьПутьКФайлуБлокировкиЗапуска(идБлокировки);
	Пока РаботаСФайлами.ФайлСуществует(ПутьКФайлуБлокировки) Цикл
		Логирователь.Отладка("Ожидание выполнения задания №" + идБлокировки); 
		Секунд = 3000;
		Приостановить(Секунд);		
	КонецЦикла;

КонецПроцедуры

Процедура Запустить(_Опции) Экспорт
	
	Опции = _Опции;
	ЗаполнительНастроек.ЗаполнитьНачальныеНастройки(Опции);	

	Если Не КонтрольРасписания.РазрешеноПоРасписанию() Тогда
		Завершатель.ЗавершитьПоОшибке("Запрещен запуск сценария по расписанию", Истина);		
	КонецЕсли;

	Если Настройки.ГрупповыеКоманды.Количество() > 0 Тогда
 		ВыполнитьГрупповыеКоманды();
 	Иначе
		БлокировкаОжиданияПредыдущегоЗадания(Опции);
		ЗаписатьФайлБлокировкиЗапуска();
		ВыполнитьКоманды(Опции.НачатьСПозиции);
 	КонецЕсли;
	
 	Завершатель.Завершить();

КонецПроцедуры

&Желудь
Процедура ПриСозданииОбъекта(&Пластилин("ЗаполнительНастроек") _ЗаполнительНастроек,
								&Пластилин("КонтрольРасписания") _КонтрольРасписания)

	ЗаполнительНастроек = _ЗаполнительНастроек;
	КонтрольРасписания = _КонтрольРасписания;

КонецПроцедуры
