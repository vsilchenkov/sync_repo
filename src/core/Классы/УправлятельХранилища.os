#Использовать v8storage

Перем сХранилища;

&Пластилин
Перем УправлятельКонфигуратора; // BSLLS:Typo-off

&Пластилин
Перем Настройки;

Функция Получить(ИмяРасширения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		Имя = ИмяРасширения;
	Иначе
		Имя = ИмяОсновной();		
	КонецЕсли;
	
	Хранилище = сХранилища.Получить(Имя);
	Если Хранилище <> Неопределено Тогда
		Возврат Хранилище;		
	КонецЕсли;

	Хранилище = Инициализировать(ИмяРасширения);	
	сХранилища.Вставить(Имя, Хранилище);
	
	Возврат Хранилище;	

КонецФункции

Функция Инициализировать(ИмяРасширения = Неопределено)

	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		НастройкиХранилища = НастройкиПоРасширению(ИмяРасширения);		
	Иначе
		НастройкиХранилища = НастройкиОсновной();
	КонецЕсли;
	
	Хранилище = Новый МенеджерХранилищаКонфигурации();
	Хранилище.УстановитьПутьКХранилищу(НастройкиХранилища.ПутьКХранилищу);
	Хранилище.УстановитьПараметрыАвторизации(НастройкиХранилища.ЛогинКХранилищу, НастройкиХранилища.ПарольКХранилищу);

	Конфигуратор = УправлятельКонфигуратора.Получить();
	Хранилище.УстановитьУправлениеКонфигуратором(Конфигуратор);

	Если ЗначениеЗаполнено(ИмяРасширения) Тогда
		Хранилище.УстановитьРасширениеХранилища(ИмяРасширения);
	КонецЕсли;

	Возврат Хранилище;

КонецФункции

Функция НастройкиОсновной()
	Возврат	Настройки;
КонецФункции

Функция НастройкиПоРасширению(ИмяРасширения)
	НастройкиРасширения = Настройки.РасширенияКонфигурации.Получить(ИмяРасширения);
	Если НастройкиРасширения = Неопределено Тогда
		ВызватьИсключение "Нет настроек расширения - " + ИмяРасширения;
	КонецЕсли;
	Возврат	НастройкиРасширения;
КонецФункции

Функция ИмяОсновной()
	Возврат "Осн";	
КонецФункции

&Желудь
Процедура ПриСозданииОбъекта()
	сХранилища = Новый Соответствие;
КонецПроцедуры